import random

def mlDecorator(*args):
    def decorator(func):
        def wrapper(**kwargs):
            data = func(**kwargs)
            ml_methods = args[0]
            metrics = args[1]

            # 执行机器学习方法
            for method in ml_methods:
                print(f"Applying {method}...")
                # 在这里实现具体的机器学习方法操作

            # 计算验证指标
            for metric in metrics:
                print(f"Calculating {metric}...")
                # 在这里实现具体的验证指标操作

        return wrapper
    return decorator
@mlDecorator(['SVM', 'RF'], ['ACC', 'MCC'])
def dataSampling(**kwargs):
    result = {}
    for key, value in kwargs.items():
        if isinstance(value, int) and value > 0:
            result[key] = [random.randint(0, 100) for _ in range(value)]
        elif isinstance(value, float) and value > 0:
            result[key] = [random.uniform(0, 1) for _ in range(value)]
        elif isinstance(value, str) and len(value) > 0:
            result[key] = [''.join(random.choices(string.ascii_letters + string.digits, k=len(value))) for _ in range(value)]
        else:
            result[key] = []
    return result

dataSampling(numbers=5, floats=3, strings=2)
